name: Build

on: [ push ]

jobs:
  only-config-changed:
    name: Configuration change validation
    timeout-minutes: 5
    runs-on: ubuntu-latest
    outputs:
      result: ${{ steps.only-config-changed.outputs.only_configuration_files_have_changed }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3.5.0
        with:
          fetch-depth: ${{ (github.event.repository.default_branch == github.ref_name && 2) || 0 }}
          ref: ${{ github.event.repository.default_branch }}

      - name: Validate that only configuration files have been changed
        shell: python
        id: only-config-changed
        env:
          CONFIG_DIRECTORIES: '["k8s/ai-production"]'
        run: |
          import os
          import json
          import subprocess

          cmd_str=""
          if "${{ github.event.repository.default_branch }}" == "${{ github.ref_name }}":
            # This means we are in the default branch, we want the directories that changed since the previous commit
            cmd_str="git diff --name-only HEAD^ HEAD | xargs dirname"
          else:
            # We're in a PR, we want the directories changed from the PR branch
            cmd_str="git diff --name-only origin/${{ github.ref_name }} | xargs dirname"

          diff=subprocess.run(cmd_str, capture_output=True, shell=True).stdout.decode('utf-8')
          changed_files = str(diff).splitlines()
          sanitized_changed_files = set(filter(None, changed_files))
          print("Changed files: ", sanitized_changed_files)

          config_directories = set(json.loads(os.getenv('CONFIG_DIRECTORIES')))
          print("Config directories: ", config_directories)

          only_configuration_files_have_changed = str(sanitized_changed_files.issubset(config_directories)).lower()
          print(only_configuration_files_have_changed)

          with open(os.environ['GITHUB_OUTPUT'], 'a') as fh:
            print(f'only_configuration_files_have_changed={only_configuration_files_have_changed}', file=fh)
  
  publish:
    runs-on: ubuntu-latest
    if: ${{ github.event.repository.default_branch == github.ref_name && needs.only-config-changed.outputs.result == 'false' }}
    needs: only-config-changed
    permissions:
      id-token: write
      contents: read
    strategy:
      matrix:
        environment: ["AI_PRODUCTION"]
    steps:
      - uses: actions/checkout@v3
      
      - name: Environment standardization
        run: |
          AWS_ACCOUNTID_VAR_NAME="AWS_ACCOUNT_ID_${{ matrix.environment }}"
          echo "AWS_ACCOUNTID_VAR_NAME=${AWS_ACCOUNTID_VAR_NAME}" >> "$GITHUB_ENV"

      - name: Setup Docker context
        run: |
          docker context create builders

      - name: Setup Buildx
        uses: docker/setup-buildx-action@v2
        with:
          endpoint: builders

      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          tags: ${{ github.sha }}
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: github_sha=${{ github.sha }}
          outputs: type=docker

      # - name: Configure ${{ matrix.environment }} AWS credentials
      #   uses: aws-actions/configure-aws-credentials@v2.0.0
      #   with:
      #     role-to-assume: arn:aws:iam::${{ vars[env.AWS_ACCOUNTID_VAR_NAME] }}:role/atom/${{ github.event.repository.name }}-${{ github.event.repository.name }}-github-actions
      #     role-session-name: GitHubActions
      #     aws-region: eu-west-1

      # - name: Login to Amazon ECR ${{ matrix.environment }}
      #   uses: aws-actions/amazon-ecr-login@v1.6.0

      # - name: Push Docker Image to AWS ECR ${{ matrix.environment }}
      #   run: |
      #     ecr_repo_url="${{ vars[env.AWS_ACCOUNTID_VAR_NAME] }}.dkr.ecr.eu-west-1.amazonaws.com/pleo/${{ github.event.repository.name }}:${{ github.sha }}"
      #     docker tag ${{ github.sha }} ${ecr_repo_url}
      #     docker push ${ecr_repo_url}
      #     docker rmi -f ${ecr_repo_url}

  # trigger-deploy-gitops:
  #   name: Trigger deployment (GitOps) - ${{ matrix.environment }}
  #   needs: publish
  #   if: ${{ github.event.repository.default_branch == github.ref_name }}
  #   uses: pleo-io/reusable-workflows/.github/workflows/update-image-tag.yaml@main
  #   strategy:
  #     # max prallel to serialize commit to repo, otherwise remote will be out of sync when push
  #     max-parallel: 1
  #     matrix:
  #       environment: ["product-dev", "product-staging"]
  #   with:
  #     environment: ${{ matrix.environment }}
  #     image_tag: ${{ github.sha }}
  #   secrets:
  #     application_id: ${{ secrets.PLEO_GH_APP_TOKEN_SIGNER_APP_ID }}
  #     application_private_key: ${{ secrets.PLEO_GH_APP_TOKEN_SIGNER_PRIVATE_KEY }}